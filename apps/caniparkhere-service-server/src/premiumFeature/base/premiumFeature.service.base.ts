/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PremiumFeature as PrismaPremiumFeature } from "@prisma/client";

export class PremiumFeatureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PremiumFeatureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.premiumFeature.count(args);
  }

  async premiumFeatures<T extends Prisma.PremiumFeatureFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PremiumFeatureFindManyArgs>
  ): Promise<PrismaPremiumFeature[]> {
    return this.prisma.premiumFeature.findMany<Prisma.PremiumFeatureFindManyArgs>(
      args
    );
  }
  async premiumFeature<T extends Prisma.PremiumFeatureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PremiumFeatureFindUniqueArgs>
  ): Promise<PrismaPremiumFeature | null> {
    return this.prisma.premiumFeature.findUnique(args);
  }
  async createPremiumFeature<T extends Prisma.PremiumFeatureCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PremiumFeatureCreateArgs>
  ): Promise<PrismaPremiumFeature> {
    return this.prisma.premiumFeature.create<T>(args);
  }
  async updatePremiumFeature<T extends Prisma.PremiumFeatureUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PremiumFeatureUpdateArgs>
  ): Promise<PrismaPremiumFeature> {
    return this.prisma.premiumFeature.update<T>(args);
  }
  async deletePremiumFeature<T extends Prisma.PremiumFeatureDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PremiumFeatureDeleteArgs>
  ): Promise<PrismaPremiumFeature> {
    return this.prisma.premiumFeature.delete(args);
  }
}
