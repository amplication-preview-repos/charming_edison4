/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ParkingSpace as PrismaParkingSpace,
  Booking as PrismaBooking,
  Review as PrismaReview,
  Event as PrismaEvent,
} from "@prisma/client";

export class ParkingSpaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParkingSpaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.parkingSpace.count(args);
  }

  async parkingSpaces<T extends Prisma.ParkingSpaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingSpaceFindManyArgs>
  ): Promise<PrismaParkingSpace[]> {
    return this.prisma.parkingSpace.findMany<Prisma.ParkingSpaceFindManyArgs>(
      args
    );
  }
  async parkingSpace<T extends Prisma.ParkingSpaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingSpaceFindUniqueArgs>
  ): Promise<PrismaParkingSpace | null> {
    return this.prisma.parkingSpace.findUnique(args);
  }
  async createParkingSpace<T extends Prisma.ParkingSpaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingSpaceCreateArgs>
  ): Promise<PrismaParkingSpace> {
    return this.prisma.parkingSpace.create<T>(args);
  }
  async updateParkingSpace<T extends Prisma.ParkingSpaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingSpaceUpdateArgs>
  ): Promise<PrismaParkingSpace> {
    return this.prisma.parkingSpace.update<T>(args);
  }
  async deleteParkingSpace<T extends Prisma.ParkingSpaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParkingSpaceDeleteArgs>
  ): Promise<PrismaParkingSpace> {
    return this.prisma.parkingSpace.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.parkingSpace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.parkingSpace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.parkingSpace
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }
}
