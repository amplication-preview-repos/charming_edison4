/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  ValidateNested,
  IsOptional,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Driver } from "../../driver/base/Driver";
import { ParkingSpace } from "../../parkingSpace/base/ParkingSpace";
import { EnumBookingPaymentStatus } from "./EnumBookingPaymentStatus";

@ObjectType()
class Booking {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Driver,
  })
  @ValidateNested()
  @Type(() => Driver)
  @IsOptional()
  driver?: Driver | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endTime!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => ParkingSpace,
  })
  @ValidateNested()
  @Type(() => ParkingSpace)
  @IsOptional()
  parkingSpace?: ParkingSpace | null;

  @ApiProperty({
    required: false,
    enum: EnumBookingPaymentStatus,
  })
  @IsEnum(EnumBookingPaymentStatus)
  @IsOptional()
  @Field(() => EnumBookingPaymentStatus, {
    nullable: true,
  })
  paymentStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startTime!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Booking as Booking };
